name: Frontend Continuous Deployment
on:
  workflow_dispatch:
  push:
    paths:
      - 'starter/frontend/**'  
    branches: 
      - main

jobs:
  LINT:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest' 

      - name: Install dependencies
        run: cd starter/frontend && npm ci
      - name: Run lint      
        run: cd starter/frontend && npm run lint

  TEST: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies 
        run: cd starter/frontend && npm ci
      - name: Run test
        run: cd starter/frontend && npm run test

  BUILD:
    needs: [LINT, TEST]
    runs-on: ubuntu-latest
    env: 
      ECR_REPOSITORY: frontend
      IMAGE_TAG: ${{ github.sha }}      

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: cd starter/frontend && npm ci    
      - name: Run test
        run: cd starter/frontend && npm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Set ECR Registry Environment Variable
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV               

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update the kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1        

      - name: Fetch Application URL
        id: get_svc_url
        run: |
          cd starter/frontend/k8s
          kubectl get svc -A
          SVC_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "SVC_URL=${SVC_URL}"
          echo "::set-output name=svc_url::${SVC_URL}" 


      - name: Build, tag, and push image to ECR
        run: |
          cd starter/frontend
          echo "Using SVC_URL=${{ steps.get_svc_url.outputs.svc_url }}"
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://${{ steps.get_svc_url.outputs.svc_url }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG starter/frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: update the image tag    
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Apply the manifests to the cluster
        run: |     
          cd starter/frontend/k8s
          kustomize build | kubectl apply -f -
       
      - name: Print Application URL
        run: |
           kubectl get svc -A             